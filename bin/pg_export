#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'pg_export'
require 'pg_export/container'
require 'pg_export/roles/colourable_string'

ENV['KEEP_DUMPS'] = ENV['KEEP_DUMPS'] || '10'
interactive = false

option_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: pg_export [options]'

  opts.on('-d', '--database DATABASE', String, '[Required] Name of the database to export') do |database|
    ENV['DATABASE'] = database
  end

  opts.on('-k', '--keep [KEEP]', String, "[Optional] Number of dump files to keep on FTP (default: #{ENV['KEEP_DUMPS']})") do |keep|
    ENV['KEEP_DUMPS'] = keep
  end

  opts.on('-t', '--timestamped', '[Optional] Enables log messages with timestamps') do
    ENV['LOGGER_FORMAT'] = 'timestamped'
  end

  opts.on('-i', '--interactive', 'Interactive, command line mode, for restoring dumps into databases') do
    ENV['LOGGER_FORMAT'] = 'muted'
    interactive = true
  end

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.separator "\nSetting can be verified by running following commands:"

  opts.on('-c', '--configuration', 'Prints the configuration') do
    PgExport::Container.start(:config)
    puts PgExport::Container['config'].to_h
    exit
  end

  opts.on('-f', '--ftp', 'Tries connecting to FTP to verify the connection') do
    PgExport::Container.start(:ftp)
    PgExport::Container['ftp_adapter'].ftp
    exit
  end
end

begin
  option_parser.parse!

  pg_export =
    if interactive
      PgExport.interactive
    else
      PgExport.plain
    end

  pg_export.call(ENV['DATABASE'], ENV['KEEP_DUMPS']) do |result|
    result.success do |_output|
      puts 'Success'
    end

    result.failure do |output|
      using PgExport::Roles::ColourableString
      puts "Error: #{output[:message]}".red
      puts option_parser
    end
  end
rescue OptionParser::MissingArgument, PgExport::InitializationError => e
  using PgExport::Roles::ColourableString
  puts "Error: #{e}".red
  puts option_parser
end
